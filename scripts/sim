#!/usr/bin/env python
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.animation as animation
import sympy

class SketchState:
    '''
    Origin is at top left of whiteboard. Positive X is to the right, and positive Y is down.
    '''
    def __init__(self):
        # Distance between left and right anchors
        self.D = 2.0

        # Length of wire between left anchor and car
        self.l1 = 1.2

        # Length of wire between right anchor and car
        self.l2 = 1.2

        # Use sympy to solve equations since I'm lazy
        x, y, l1, l2 = sympy.symbols('x y l1 l2')
        solutions = sympy.solve(
            [x**2 + y**2 - l1**2, (self.D - x)**2 + y**2 - l2**2],
            [x, y], dict=True)
        self.fx = sympy.lambdify((l1, l2), solutions[0][x], 'numpy')
        self.fy = sympy.lambdify((l1, l2), solutions[0][y], 'numpy')

    def compute_car_position(self):
        '''
        Compute position of car based on length of left and right wires.
        '''
        return np.array((self.fx(self.l1, self.l2), self.fy(self.l1, self.l2)))

class SketchSim:
    def __init__(self, board_height=1.0):
        self.state = SketchState()
        self.board_height = board_height
        self.fig = fig = plt.figure()
        self.ax = fig.add_subplot(111)
        self.ax.set_xlim(0.0, self.state.D)
        self.ax.set_ylim(-self.board_height, 0.0)

        # Initialize plot objects
        self.left_line, = self.ax.plot([], [])
        self.right_line, = self.ax.plot([], [])

        # Create animation
        self.ani = animation.FuncAnimation(self.fig, self.step, interval=100, blit=False)

    def step(self, step_i):
        x, y = self.state.compute_car_position()
        D = self.state.D
        print x, y, D
        self.left_line.set_data([0., x], [0., y])
        self.right_line.set_data([x, D], [y, 0.])
        return self.left_line, self.right_line

    def run(self):
        # We use matplotlib's event loop
        plt.show()


if __name__ == '__main__':
    sim = SketchSim()
    sim.run()
